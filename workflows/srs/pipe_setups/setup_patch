#!/bin/bash

### read or build the list of patches for a given tract and launch a series of coaddDriver task
### based on $MAX_PATCH_NB number of patches per job. 

echo "tract ${TRACT}"
echo "patch ${PATCH}"

#for a given TRACT, build the series of patches to be coadded in parallel
if [[ $PATCH = "" ]]; then
   #only tracts were provided, so we need to build the patch distribution
   echo "only tracks provided"
   PATCH=`sqlite3 ${IN_DIR}/rerun/${RERUN1}/tracts_mapping.sqlite3 "select DISTINCT patch from overlaps WHERE tract=${TRACT};"`
   #remove the space inside the patch pair
   patches="${PATCH//[\ ()]/}"
   #concatenate pairs with the ^
   echo $patches > tmpfile; patches=`cat tmpfile`;rm tmpfile;PATCH="${patches//\ /^}"
fi
echo $PATCH

if [[ -z $MAX_PATCH_NB ]]; then
    MAX_PATCH_NB=2;
fi
count=$(( 4*${MAX_PATCH_NB} ))
fold -b${count} <<< $PATCH > tmpfile
while read patch; do
    #remove trailing ^ if any
    patch=${patch%^}
    echo pipelineCreateStream task_coadd_tract_patch -1 "DM_SETUP="\""${DM_SETUP}"\"",WORKDIR="\""${WORKDIR}"\"",TRACT="\""${TRACT}"\"",PATCH="\""${patch}"\"""
    pipelineCreateStream task_coadd_tract_patch -1 "DM_SETUP="\""${DM_SETUP}"\"",WORKDIR="\""${WORKDIR}"\"",TRACT="\""${TRACT}"\"",PATCH="\""${patch}"\"""
done < tmpfile
rm tmpfile

[[ $? == 0 ]] && echo "success" || (echo 'error'; exit 1)
