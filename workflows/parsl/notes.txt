# Define Parsl log directory
logdir = parsl.dfk().run_dir + "/dm-logs/"


Change instances of "logdir" to "f'{logdir}/ingest'" or similar, as
appropriate.

********** CHANGES **************

ingest.perform_ingest(configuration, f'{logdir}/ingest', rerun1)


        skymap_future = make_sky_map(configuration.repo_dir, rerun1,
                                 stdout=f'{logdir}/skyMap/make_sky_map.stdout',
                                 stderr=f'{logdir}/skyMap/make_sky_map.stderr',
                                 wrap=configuration.wrap,
                                 parsl_resource_specification={"priority": (1000,)})


        this_raft_single_frame_fut = visits.single_frame_driver(
            configuration.repo_dir,
            inrepo,
            outrepo,
            visit_id,
            raft_name,
            stdout=f'{logdir}/singleFrameDvr/{sfd_output_basename}.stdout',
            stderr=f'{logdir}/singleFrameDvr/{sfd_output_basename}.stderr',
            wrap=configuration.wrap,
            parsl_resource_specification={"priority": (1200, visit_id)})


        this_visit_sky_correction_futs.append(visits.sky_correction(
            configuration.repo_dir,
            inrepo,
            outrepo,
            visit_id,
            raft_name,
            inputs=[this_raft_single_frame_fut],
            stdout=f'{logdir}/skyCorr/{sky_correction_stdbase}.stdout',
            stderr=f'{logdir}/skyCorr/{sky_correction_stdbase}.stderr',
            wrap=configuration.wrap,
            parsl_resource_specification={"priority": (1100, visit_id)}))



    fut_check_ccd = visits.check_ccd_astrometry(
        configuration.dm_root,
        configuration.repo_dir,
        rerun3,
        visit_id,
        inputs=this_visit_sky_correction_futs,
        stdout=f'{logdir}/checkCcdAstrmy/{check_ccd_stdbase}.stdout',
        stderr=f'{logdir}/checkCcdAstrmy/{check_ccd_stdbase}.stderr',
        wrap=configuration.wrap)

    fut_tract2visit = tract2visit_mapper(
        configuration.dm_root,
        configuration.repo_dir,
        rerun2,
        metadata_dir,
        visit_id,
        inputs=this_visit_single_frame_futs,
        stdout=f'{logdir}/tractMapper/{tract2visit_mapper_stdbase}.stdout',
        stderr=f'{logdir}/tractMapper/{tract2visit_mapper_stdbase}.stderr',
        wrap=configuration.wrap,
        parsl_resource_specification={"priority": (1200, visit_id)})

    raft_list_future = raft_list_for_visit(
        configuration.repo_dir,
        visit_id,
        raft_list_fn,
        stdout=f'{logdir}/raftList/{os.path.basename(raft_list_fn)}.stdout',
        stderr=f'{logdir}/raftList/{os.path.basename(raft_list_fn)}.stderr',
        wrap=configuration.wrap)

    visit_file_future = make_visit_file(
        configuration.repo_dir,
        visit_file,
        stdout=f'{logdir}/mkVisitFile/make_visit_file.stdout',
        stderr=f'{logdir}/mkVisitFile/make_visit_file.stderr',
        wrap=configuration.wrap_sql,
        parsl_resource_specification={"priority": (1000,)})

    tract_list_future = make_tract_list(
        configuration.repo_dir,
        metadata_dir,
        visit_min,
        visit_max,
        tracts_file,
        stdout=f'{logdir}/mkTractList/make_tract_list.stdout',
        stderr=f'{logdir}/mkTractList/make_tract_list.stderr',
        wrap=configuration.wrap)

        tract_patch_futures[tract_id] = make_patch_list_for_tract(
            metadata_dir,
            tract_id,
            visit_min,
            visit_max,
            patches_file,
            stdout=f'{logdir}/mkPatchList/make_patch_list_for_tract_{tract_id}.stdout",
            stderr=f'{logdir}/mkPatchList/make_patch_list_for_tract_{tract_id}.stderr",
            wrap=configuration.wrap_sql)

                fut = visits_for_tract_patch_filter(
                             repo_dir,
                             metadata_dir,
                             rerun3,
                             tract_id,
                             patch_id,
                             filter_id,
                             visit_min,
                             visit_max,
                             visit_file,
                             stdout=f'{logdir}/visits4TPF/visit_for_tract_{tract_id}_patch_{patch_idl}_filter_{filter_id}.stdout',
                             stderr=f'{logdir}/visits4TPF/visit_for_tract_{tract_id}_patch_{patch_idl}_filter_{filter_id}.stderr',
                             wrap=configuration.wrap_sql)

                fut2 = tracts.coadd_parsl_driver(
                              configuration,
                              rerun3,
                              rerun4,
                              tract_id,
                              patch_idx,
                              filter_id,
                              visit_file,
                              None,
                              inputs=iList,
                              logbase=f'{logdir}/coadd/coadd_for_tract_{tract_id}_patch_{patch_idl}_filter_{filter_id}',
                              wrap=configuration.wrap)



            fut3 = tracts.multiband_parsl_driver(
                          configuration,
                          rerun4,
                          rerun5,
                          tract_id,
                          patch_idx,
                          ["u", "g", "r", "i", "z", "y"],
                          inputs=this_patch_futures,
                          logbase=f'{logdir}/multiband/multiband_for_tract_{tract_id}_patch_{patch_idl}',
                          wrap=configuration.wrap)



=================================================================================
=================================================================================
=================================================================================


Divide metadata into smaller directories


** CHANGES **

            visit_file = f'{metadata_dir}/visitLists/visits-for-tract-{tract_id}-patch-{filename_patch_id}-filter-{filter_id}.list'


        patches_file = "{metadata_dir}/patchLists/patches-for-tract-{tract}.list".format(tract=tract_id, metadata_dir=metadata_dir)







=================================================================================
=================================================================================
=================================================================================


self.logTypes = {'mtl':'make_tract_list',
                         'mpl':'make_patch_list_for_tract',
                         'mcte':'coadd*visit*',
                         'ac':'.assemble_coadd.',
                         'dcs':'.detect_coadd_sources',
                         'mcd':'.merge_coadd_detections.',
                         'dbcs':'-deblend_coadd_sources.',
                         'mcs':'-measure_coadd_sources.',
                         'mcm':'-merge-coadd-measurements.',
                         'fpc':'-forced_phot_coadd.'}


make_visit_file(repo_dir, visit_file, stdout=None, stderr=None, wrap=None,
                    parsl_resource_specification=None)

def raft_list_for_visit(repo_dir, visit_id, out_filename,
                        stderr=None, stdout=None, wrap=None, parsl_resource_specification=None

def tract2visit_mapper(dm_root, repo_dir, rerun, metadata, visit, inputs=[],
                       stderr=None, stdout=None, wrap=None,
                       parsl_resource_specification=None)

def process_visit_rafts(visit_id, raft_list_fn, inputs=None)

